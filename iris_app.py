import streamlit as stimport pandas as pdimport numpy as npimport plotly.express as pximport seaborn as snsimport matplotlib.pyplot as pltst.title('Iris Dataset App')st.write(""" Let's explore the Iris Data set!""")df = pd.read_csv("/Users/apple/Desktop/Python/GRIP/Iris.csv")if st.checkbox('Show Iris Dataframe'):      st.write(df)     st.write('To compare the species, fill the boxes below')    species = st.multiselect('Select 2 or more Iris Species', df['Species'].unique())col1 = st.selectbox('Variable 1', df.columns[1:5])col2 = st.selectbox('Variable 2', df.columns[1:5])new_df = df[(df['Species'].isin(species))]#st.write(new_df)fig = px.scatter(new_df, x =col1,y=col2, color=df['Species'])st.plotly_chart(fig)from sklearn.model_selection import train_test_splitfrom sklearn.tree import DecisionTreeClassifierfrom sklearn.metrics import confusion_matrixfrom sklearn.svm import SVCfeatures= df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']].valueslabels = df['Species'].valuesfeature_cols = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']X = df[feature_cols]y = df.SpeciesX_train,X_test, y_train, y_test = train_test_split(features, labels, train_size=0.7, random_state=1)alg = ['Decision Tree', 'Other']classifier = st.selectbox('  ', alg)if classifier=='Decision Tree':    dtc = DecisionTreeClassifier()    dtc.fit(X_train, y_train)    acc = dtc.score(X_test, y_test)    st.write('Accuracy: ', acc)    pred_dtc = dtc.predict(X_test)    cm_dtc=confusion_matrix(y_test,pred_dtc)    st.write('Confusion matrix: ', cm_dtc)elif classifier == 'Other':    st.write('Error')    #PREDICTOR    st.header('Species Predictor')    st.write('User Parameters')def user_input_features():    sepal_length = st.slider('Sepal length', 4.3, 7.9, 5.4)    sepal_width = st.slider('Sepal width', 2.0, 4.4, 3.4)    petal_length = st.slider('Petal length', 1.0, 6.9, 1.3)    petal_width = st.slider('Petal width', 0.1, 2.5, 0.2)    data = {'sepal_length': sepal_length,            'sepal_width': sepal_width,            'petal_length': petal_length,            'petal_width': petal_width}    features = pd.DataFrame(data, index=[0])    return featuresdf = user_input_features()from sklearn import datasetsfrom sklearn.ensemble import RandomForestClassifieriris = datasets.load_iris()X = iris.dataY = iris.targetclf = RandomForestClassifier()clf.fit(X, Y)prediction = clf.predict(df)prediction_proba = clf.predict_proba(df)st.subheader('Prediction')st.write(iris.target_names[prediction])